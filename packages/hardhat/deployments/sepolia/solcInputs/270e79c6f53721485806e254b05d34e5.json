{
  "language": "Solidity",
  "sources": {
    "contracts/Faucet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract Faucet {\n\taddress payable public owner;\n\tuint256 public constant MAX_WITHDRAWAL = 0.1 ether;\n\tuint256 public lockTime = 1 minutes;\n\n\tmapping(address => uint256) nextAccessTime;\n\n\tevent Withdrawal(address indexed to, uint256 amount);\n\tevent Deposited(address indexed by, uint256 amount);\n\n\tconstructor() {\n\t\towner = payable(msg.sender);\n\t}\n\n\tmodifier onlyOwner() {\n\t\trequire(msg.sender == owner, \"Only owner can call this function.\");\n\t\t_;\n\t}\n\n\tfunction withdraw(address _to) external {\n\t\trequire(\n\t\t\t_to.balance < 0.2 ether,\n\t\t\t\"Your balance is too high.\"\n\t\t);\n\t\trequire(\n\t\t\taddress(this).balance >= MAX_WITHDRAWAL,\n\t\t\t\"Insufficient balance in the faucet.\"\n\t\t);\n\t\trequire(\n\t\t\tblock.timestamp >= nextAccessTime[_to],\n\t\t\t\"Insufficient time elapsed since last withdrawal - try again later.\"\n\t\t);\n\n\t\tnextAccessTime[_to] = block.timestamp + lockTime;\n\n\t\tpayable(_to).transfer(MAX_WITHDRAWAL);\n\t\temit Withdrawal(_to, MAX_WITHDRAWAL);\n\t}\n\n\t// Fallback function to receive ether\n\treceive() external payable {}\n\n\t// Function to allow any user to refill the faucet\n\tfunction deposit() external payable {\n\t\trequire(msg.value > 0, \"Deposit amount must be greater than 0.\");\n\n\t\temit Deposited(msg.sender, msg.value);\n\t}\n\n\t// Function to allow the owner to withdraw funds from the contract\n\tfunction withdrawFunds(uint256 _amount) external {\n\t\trequire(\n\t\t\taddress(this).balance >= _amount,\n\t\t\t\"Insufficient balance in the contract.\"\n\t\t);\n\t\towner.transfer(_amount);\n\t}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}